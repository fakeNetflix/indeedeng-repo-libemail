package libemail

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// SenderMock implements Sender
type SenderMock struct {
	t minimock.Tester

	funcSend          func(m1 Message) (err error)
	afterSendCounter  uint64
	beforeSendCounter uint64
	SendMock          mSenderMockSend
}

// NewSenderMock returns a mock for Sender
func NewSenderMock(t minimock.Tester) *SenderMock {
	m := &SenderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.SendMock = mSenderMockSend{mock: m}

	return m
}

type mSenderMockSend struct {
	mock               *SenderMock
	defaultExpectation *SenderMockSendExpectation
	expectations       []*SenderMockSendExpectation
}

// SenderMockSendExpectation specifies expectation struct of the Sender.Send
type SenderMockSendExpectation struct {
	mock    *SenderMock
	params  *SenderMockSendParams
	results *SenderMockSendResults
	Counter uint64
}

// SenderMockSendParams contains parameters of the Sender.Send
type SenderMockSendParams struct {
	m1 Message
}

// SenderMockSendResults contains results of the Sender.Send
type SenderMockSendResults struct {
	err error
}

// Expect sets up expected params for Sender.Send
func (m *mSenderMockSend) Expect(m1 Message) *mSenderMockSend {
	if m.mock.funcSend != nil {
		m.mock.t.Fatalf("SenderMock.Send mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SenderMockSendExpectation{}
	}

	m.defaultExpectation.params = &SenderMockSendParams{m1}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by Sender.Send
func (m *mSenderMockSend) Return(err error) *SenderMock {
	if m.mock.funcSend != nil {
		m.mock.t.Fatalf("SenderMock.Send mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SenderMockSendExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &SenderMockSendResults{err}
	return m.mock
}

//Set uses given function f to mock the Sender.Send method
func (m *mSenderMockSend) Set(f func(m1 Message) (err error)) *SenderMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the Sender.Send method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the Sender.Send method")
	}

	m.mock.funcSend = f
	return m.mock
}

// When sets expectation for the Sender.Send which will trigger the result defined by the following
// Then helper
func (m *mSenderMockSend) When(m1 Message) *SenderMockSendExpectation {
	if m.mock.funcSend != nil {
		m.mock.t.Fatalf("SenderMock.Send mock is already set by Set")
	}

	expectation := &SenderMockSendExpectation{
		mock:   m.mock,
		params: &SenderMockSendParams{m1},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up Sender.Send return parameters for the expectation previously defined by the When method
func (e *SenderMockSendExpectation) Then(err error) *SenderMock {
	e.results = &SenderMockSendResults{err}
	return e.mock
}

// Send implements Sender
func (m *SenderMock) Send(m1 Message) (err error) {
	mm_atomic.AddUint64(&m.beforeSendCounter, 1)
	defer mm_atomic.AddUint64(&m.afterSendCounter, 1)

	for _, e := range m.SendMock.expectations {
		if minimock.Equal(*e.params, SenderMockSendParams{m1}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if m.SendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.SendMock.defaultExpectation.Counter, 1)
		want := m.SendMock.defaultExpectation.params
		got := SenderMockSendParams{m1}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SenderMock.Send got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.SendMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the SenderMock.Send")
		}
		return (*results).err
	}
	if m.funcSend != nil {
		return m.funcSend(m1)
	}
	m.t.Fatalf("Unexpected call to SenderMock.Send. %v", m1)
	return
}

// SendAfterCounter returns a count of finished SenderMock.Send invocations
func (m *SenderMock) SendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterSendCounter)
}

// SendBeforeCounter returns a count of SenderMock.Send invocations
func (m *SenderMock) SendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeSendCounter)
}

// MinimockSendDone returns true if the count of the Send invocations corresponds
// the number of defined expectations
func (m *SenderMock) MinimockSendDone() bool {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendInspect logs each unmet expectation
func (m *SenderMock) MinimockSendInspect() {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SenderMock.Send with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		if m.SendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SenderMock.Send")
		} else {
			m.t.Errorf("Expected call to SenderMock.Send with params: %#v", *m.SendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && mm_atomic.LoadUint64(&m.afterSendCounter) < 1 {
		m.t.Error("Expected call to SenderMock.Send")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SenderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSendInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SenderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SenderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendDone()
}
