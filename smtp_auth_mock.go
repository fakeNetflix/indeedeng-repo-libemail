package libemail

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"net/smtp"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// SMTPAuthMock implements SMTPAuth
type SMTPAuthMock struct {
	t minimock.Tester

	funcNext          func(fromServer []byte, more bool) (toServer []byte, err error)
	afterNextCounter  uint64
	beforeNextCounter uint64
	NextMock          mSMTPAuthMockNext

	funcStart          func(server *smtp.ServerInfo) (proto string, toServer []byte, err error)
	afterStartCounter  uint64
	beforeStartCounter uint64
	StartMock          mSMTPAuthMockStart
}

// NewSMTPAuthMock returns a mock for SMTPAuth
func NewSMTPAuthMock(t minimock.Tester) *SMTPAuthMock {
	m := &SMTPAuthMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}
	m.NextMock = mSMTPAuthMockNext{mock: m}
	m.StartMock = mSMTPAuthMockStart{mock: m}

	return m
}

type mSMTPAuthMockNext struct {
	mock               *SMTPAuthMock
	defaultExpectation *SMTPAuthMockNextExpectation
	expectations       []*SMTPAuthMockNextExpectation
}

// SMTPAuthMockNextExpectation specifies expectation struct of the SMTPAuth.Next
type SMTPAuthMockNextExpectation struct {
	mock    *SMTPAuthMock
	params  *SMTPAuthMockNextParams
	results *SMTPAuthMockNextResults
	Counter uint64
}

// SMTPAuthMockNextParams contains parameters of the SMTPAuth.Next
type SMTPAuthMockNextParams struct {
	fromServer []byte
	more       bool
}

// SMTPAuthMockNextResults contains results of the SMTPAuth.Next
type SMTPAuthMockNextResults struct {
	toServer []byte
	err      error
}

// Expect sets up expected params for SMTPAuth.Next
func (m *mSMTPAuthMockNext) Expect(fromServer []byte, more bool) *mSMTPAuthMockNext {
	if m.mock.funcNext != nil {
		m.mock.t.Fatalf("SMTPAuthMock.Next mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SMTPAuthMockNextExpectation{}
	}

	m.defaultExpectation.params = &SMTPAuthMockNextParams{fromServer, more}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by SMTPAuth.Next
func (m *mSMTPAuthMockNext) Return(toServer []byte, err error) *SMTPAuthMock {
	if m.mock.funcNext != nil {
		m.mock.t.Fatalf("SMTPAuthMock.Next mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SMTPAuthMockNextExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &SMTPAuthMockNextResults{toServer, err}
	return m.mock
}

//Set uses given function f to mock the SMTPAuth.Next method
func (m *mSMTPAuthMockNext) Set(f func(fromServer []byte, more bool) (toServer []byte, err error)) *SMTPAuthMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the SMTPAuth.Next method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the SMTPAuth.Next method")
	}

	m.mock.funcNext = f
	return m.mock
}

// When sets expectation for the SMTPAuth.Next which will trigger the result defined by the following
// Then helper
func (m *mSMTPAuthMockNext) When(fromServer []byte, more bool) *SMTPAuthMockNextExpectation {
	if m.mock.funcNext != nil {
		m.mock.t.Fatalf("SMTPAuthMock.Next mock is already set by Set")
	}

	expectation := &SMTPAuthMockNextExpectation{
		mock:   m.mock,
		params: &SMTPAuthMockNextParams{fromServer, more},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up SMTPAuth.Next return parameters for the expectation previously defined by the When method
func (e *SMTPAuthMockNextExpectation) Then(toServer []byte, err error) *SMTPAuthMock {
	e.results = &SMTPAuthMockNextResults{toServer, err}
	return e.mock
}

// Next implements SMTPAuth
func (m *SMTPAuthMock) Next(fromServer []byte, more bool) (toServer []byte, err error) {
	mm_atomic.AddUint64(&m.beforeNextCounter, 1)
	defer mm_atomic.AddUint64(&m.afterNextCounter, 1)

	for _, e := range m.NextMock.expectations {
		if minimock.Equal(*e.params, SMTPAuthMockNextParams{fromServer, more}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.toServer, e.results.err
		}
	}

	if m.NextMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.NextMock.defaultExpectation.Counter, 1)
		want := m.NextMock.defaultExpectation.params
		got := SMTPAuthMockNextParams{fromServer, more}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SMTPAuthMock.Next got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.NextMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the SMTPAuthMock.Next")
		}
		return (*results).toServer, (*results).err
	}
	if m.funcNext != nil {
		return m.funcNext(fromServer, more)
	}
	m.t.Fatalf("Unexpected call to SMTPAuthMock.Next. %v %v", fromServer, more)
	return
}

// NextAfterCounter returns a count of finished SMTPAuthMock.Next invocations
func (m *SMTPAuthMock) NextAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterNextCounter)
}

// NextBeforeCounter returns a count of SMTPAuthMock.Next invocations
func (m *SMTPAuthMock) NextBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeNextCounter)
}

// MinimockNextDone returns true if the count of the Next invocations corresponds
// the number of defined expectations
func (m *SMTPAuthMock) MinimockNextDone() bool {
	for _, e := range m.NextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NextMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNextCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNext != nil && mm_atomic.LoadUint64(&m.afterNextCounter) < 1 {
		return false
	}
	return true
}

// MinimockNextInspect logs each unmet expectation
func (m *SMTPAuthMock) MinimockNextInspect() {
	for _, e := range m.NextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SMTPAuthMock.Next with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NextMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNextCounter) < 1 {
		if m.NextMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SMTPAuthMock.Next")
		} else {
			m.t.Errorf("Expected call to SMTPAuthMock.Next with params: %#v", *m.NextMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNext != nil && mm_atomic.LoadUint64(&m.afterNextCounter) < 1 {
		m.t.Error("Expected call to SMTPAuthMock.Next")
	}
}

type mSMTPAuthMockStart struct {
	mock               *SMTPAuthMock
	defaultExpectation *SMTPAuthMockStartExpectation
	expectations       []*SMTPAuthMockStartExpectation
}

// SMTPAuthMockStartExpectation specifies expectation struct of the SMTPAuth.Start
type SMTPAuthMockStartExpectation struct {
	mock    *SMTPAuthMock
	params  *SMTPAuthMockStartParams
	results *SMTPAuthMockStartResults
	Counter uint64
}

// SMTPAuthMockStartParams contains parameters of the SMTPAuth.Start
type SMTPAuthMockStartParams struct {
	server *smtp.ServerInfo
}

// SMTPAuthMockStartResults contains results of the SMTPAuth.Start
type SMTPAuthMockStartResults struct {
	proto    string
	toServer []byte
	err      error
}

// Expect sets up expected params for SMTPAuth.Start
func (m *mSMTPAuthMockStart) Expect(server *smtp.ServerInfo) *mSMTPAuthMockStart {
	if m.mock.funcStart != nil {
		m.mock.t.Fatalf("SMTPAuthMock.Start mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SMTPAuthMockStartExpectation{}
	}

	m.defaultExpectation.params = &SMTPAuthMockStartParams{server}
	for _, e := range m.expectations {
		if minimock.Equal(e.params, m.defaultExpectation.params) {
			m.mock.t.Fatalf("Expectation set by When has same params: %#v", *m.defaultExpectation.params)
		}
	}

	return m
}

// Return sets up results that will be returned by SMTPAuth.Start
func (m *mSMTPAuthMockStart) Return(proto string, toServer []byte, err error) *SMTPAuthMock {
	if m.mock.funcStart != nil {
		m.mock.t.Fatalf("SMTPAuthMock.Start mock is already set by Set")
	}

	if m.defaultExpectation == nil {
		m.defaultExpectation = &SMTPAuthMockStartExpectation{mock: m.mock}
	}
	m.defaultExpectation.results = &SMTPAuthMockStartResults{proto, toServer, err}
	return m.mock
}

//Set uses given function f to mock the SMTPAuth.Start method
func (m *mSMTPAuthMockStart) Set(f func(server *smtp.ServerInfo) (proto string, toServer []byte, err error)) *SMTPAuthMock {
	if m.defaultExpectation != nil {
		m.mock.t.Fatalf("Default expectation is already set for the SMTPAuth.Start method")
	}

	if len(m.expectations) > 0 {
		m.mock.t.Fatalf("Some expectations are already set for the SMTPAuth.Start method")
	}

	m.mock.funcStart = f
	return m.mock
}

// When sets expectation for the SMTPAuth.Start which will trigger the result defined by the following
// Then helper
func (m *mSMTPAuthMockStart) When(server *smtp.ServerInfo) *SMTPAuthMockStartExpectation {
	if m.mock.funcStart != nil {
		m.mock.t.Fatalf("SMTPAuthMock.Start mock is already set by Set")
	}

	expectation := &SMTPAuthMockStartExpectation{
		mock:   m.mock,
		params: &SMTPAuthMockStartParams{server},
	}
	m.expectations = append(m.expectations, expectation)
	return expectation
}

// Then sets up SMTPAuth.Start return parameters for the expectation previously defined by the When method
func (e *SMTPAuthMockStartExpectation) Then(proto string, toServer []byte, err error) *SMTPAuthMock {
	e.results = &SMTPAuthMockStartResults{proto, toServer, err}
	return e.mock
}

// Start implements SMTPAuth
func (m *SMTPAuthMock) Start(server *smtp.ServerInfo) (proto string, toServer []byte, err error) {
	mm_atomic.AddUint64(&m.beforeStartCounter, 1)
	defer mm_atomic.AddUint64(&m.afterStartCounter, 1)

	for _, e := range m.StartMock.expectations {
		if minimock.Equal(*e.params, SMTPAuthMockStartParams{server}) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.proto, e.results.toServer, e.results.err
		}
	}

	if m.StartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&m.StartMock.defaultExpectation.Counter, 1)
		want := m.StartMock.defaultExpectation.params
		got := SMTPAuthMockStartParams{server}
		if want != nil && !minimock.Equal(*want, got) {
			m.t.Errorf("SMTPAuthMock.Start got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := m.StartMock.defaultExpectation.results
		if results == nil {
			m.t.Fatal("No results are set for the SMTPAuthMock.Start")
		}
		return (*results).proto, (*results).toServer, (*results).err
	}
	if m.funcStart != nil {
		return m.funcStart(server)
	}
	m.t.Fatalf("Unexpected call to SMTPAuthMock.Start. %v", server)
	return
}

// StartAfterCounter returns a count of finished SMTPAuthMock.Start invocations
func (m *SMTPAuthMock) StartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&m.afterStartCounter)
}

// StartBeforeCounter returns a count of SMTPAuthMock.Start invocations
func (m *SMTPAuthMock) StartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&m.beforeStartCounter)
}

// MinimockStartDone returns true if the count of the Start invocations corresponds
// the number of defined expectations
func (m *SMTPAuthMock) MinimockStartDone() bool {
	for _, e := range m.StartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStart != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		return false
	}
	return true
}

// MinimockStartInspect logs each unmet expectation
func (m *SMTPAuthMock) MinimockStartInspect() {
	for _, e := range m.StartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SMTPAuthMock.Start with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		if m.StartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SMTPAuthMock.Start")
		} else {
			m.t.Errorf("Expected call to SMTPAuthMock.Start with params: %#v", *m.StartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStart != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		m.t.Error("Expected call to SMTPAuthMock.Start")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SMTPAuthMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockNextInspect()

		m.MinimockStartInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SMTPAuthMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SMTPAuthMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNextDone() &&
		m.MinimockStartDone()
}
